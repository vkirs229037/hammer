program -> stmt ";" program | stmt

stmt -> expr | block | assign

block -> "{" program "}"

expr -> term | func
func -> IDENT "(" expr ")"
term -> factor TERM_OP term | factor
factor -> unary FACT_OP factor | unary
unary -> UNARY_OP unary | primary
primary -> NUMBER | IDENT | "(" expr ")" 

assign -> let IDENT = EXPR

TERM_OP := +, -
FACT_OP := *, /
UNARY_OP := -
NUMBER := 0, 1, ..., 