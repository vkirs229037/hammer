<program> -> <stmt> ";" <program> | <stmt>
<stmt> -> <expr> | <block>
<block> -> "{" <program> "}"
<expr> -> <term> | <func>
<func> -> IDENT "(" <expr> ")"
<term> -> <factor> TERM_OP <term> | <factor>
<factor> -> <unary> FACT_OP <factor> | <unary>
<unary> -> UNARY_OP <unary> | <primary>
<primary> -> NUMBER | "(" <expr> ")"

TERM_OP := +, -
FACT_OP := *, /
UNARY_OP := -
NUMBER := 0, 1, ..., 